{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "DefaultLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/stream-speculator-dev-default"
      }
    },
    "TaskHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/stream-speculator-dev-taskHandler"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "stream-speculator",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/stream-speculator-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/stream-speculator-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:SendMessageBatch"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TaskQueue",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "TaskQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "stream-speculator",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "DefaultLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/stream-speculator/dev/1627909753073-2021-08-02T13:09:13.073Z/stream-speculator.zip"
        },
        "Handler": "build/src/server/ServerlessExpressApp.default",
        "Runtime": "nodejs14.x",
        "FunctionName": "stream-speculator-dev-default",
        "MemorySize": 128,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "PUBLIC_FOLDER_PATH": "src/public",
            "REGION": "us-east-1",
            "SQS_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TWITCH_CLIENT_ID": "fkg37usvjn11m0v4eq6bw0fdxyee6r",
            "TWITCH_CLIENT_SECRET": "fqjtca424j4cpl2gf8dhounpfmo2bm",
            "TWITCH_WEBHOOK_SECRET": "8s33AbzxXmdfh7Q46pdKfe",
            "TWITCH_WEBHOOK_CALLBACK": "https://dev.streamspeculator.com/api/twitch/webhook",
            "FAUNADB_SECRET": "fnAELdR0MTACA90W2H-MWlt_-knTXVGl-oaoJoaw",
            "COOKIE_SIGNING_KEY": "reeYadpp733h2NA3$anF8iiOZ#&uT"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DefaultLogGroup"
      ]
    },
    "TaskHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/stream-speculator/dev/1627909753073-2021-08-02T13:09:13.073Z/stream-speculator.zip"
        },
        "Handler": "build/src/server/handlers/taskRouter.default",
        "Runtime": "nodejs14.x",
        "FunctionName": "stream-speculator-dev-taskHandler",
        "MemorySize": 128,
        "Timeout": 15,
        "Environment": {
          "Variables": {
            "PUBLIC_FOLDER_PATH": "src/public",
            "REGION": "us-east-1",
            "SQS_QUEUE_URL": {
              "Ref": "TaskQueue"
            },
            "TWITCH_CLIENT_ID": "fkg37usvjn11m0v4eq6bw0fdxyee6r",
            "TWITCH_CLIENT_SECRET": "fqjtca424j4cpl2gf8dhounpfmo2bm",
            "TWITCH_WEBHOOK_SECRET": "8s33AbzxXmdfh7Q46pdKfe",
            "TWITCH_WEBHOOK_CALLBACK": "https://dev.streamspeculator.com/api/twitch/webhook",
            "FAUNADB_SECRET": "fnAELdR0MTACA90W2H-MWlt_-knTXVGl-oaoJoaw",
            "COOKIE_SIGNING_KEY": "reeYadpp733h2NA3$anF8iiOZ#&uT"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TaskHandlerLogGroup"
      ]
    },
    "DefaultLambdaVersionzbOojHsMJwMRZVHPnmJDC3WTzkzHPsUh9OL7UBi5R0c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DefaultLambdaFunction"
        },
        "CodeSha256": "tXnLhQX5uPi5uOfnKbGM34yOBjHtg7gz3cM5c53bjS8="
      }
    },
    "TaskHandlerLambdaVersionXO22HLql5K22AxXyS9mrxFv94yxW1QgMvYiAxoGA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TaskHandlerLambdaFunction"
        },
        "CodeSha256": "tXnLhQX5uPi5uOfnKbGM34yOBjHtg7gz3cM5c53bjS8="
      }
    },
    "TaskHandlerEventSourceMappingSQSTaskQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "TaskQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "TaskHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-stream-speculator",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "DefaultLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DefaultLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationDefault": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "DefaultLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 6500
      }
    },
    "HttpApiRouteDefault": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "$default",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationDefault"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationDefault"
    },
    "TaskQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "stream-speculator-task-queue"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "DefaultLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DefaultLambdaVersionzbOojHsMJwMRZVHPnmJDC3WTzkzHPsUh9OL7UBi5R0c"
      }
    },
    "TaskHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TaskHandlerLambdaVersionXO22HLql5K22AxXyS9mrxFv94yxW1QgMvYiAxoGA"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      }
    }
  }
}